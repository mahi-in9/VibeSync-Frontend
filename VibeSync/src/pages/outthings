import React, { useState, useEffect } from 'react';
import { ref, set, onValue, off } from 'firebase/database';
import { db } from '../firebase';
import { Share2, Copy, Plus, Users, LogOut, Eye, EyeOff } from 'lucide-react';

const Groups = () => {
  const [userId] = useState(() => {
    const saved = sessionStorage.getItem('planUserId');
    if (saved) return saved;
    const id = 'user_' + Math.random().toString(36).substr(2, 9);
    sessionStorage.setItem('planUserId', id);
    return id;
  });

  const [userName, setUserName] = useState(() => {
    return localStorage.getItem('planUserName') || '';
  });

  const [groupCode, setGroupCode] = useState(() => {
    return localStorage.getItem('planGroupCode') || '';
  });

  const [joined, setJoined] = useState(() => {
    return localStorage.getItem('planJoined') === 'true';
  });

  const [selectedGroup, setSelectedGroup] = useState(() => {
    const saved = localStorage.getItem('planSelectedGroup');
    return saved ? JSON.parse(saved) : null;
  });

  const [newGroupName, setNewGroupName] = useState('');
  const [message, setMessage] = useState('');
  const [mood, setMood] = useState('chill');
  const [pollTopic, setPollTopic] = useState('');
  const [pollOptions, setPollOptions] = useState(['', '']);
  const [error, setError] = useState('');
  const [copied, setCopied] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const moods = [
    { value: 'chill', label: 'Chill', icon: '😎', color: 'bg-blue-100' },
    { value: 'adventurous', label: 'Adventurous', icon: '🚀', color: 'bg-orange-100' },
    { value: 'foodie', label: 'Foodie', icon: '🍕', color: 'bg-red-100' },
    { value: 'romantic', label: 'Romantic', icon: '💕', color: 'bg-pink-100' },
  ];

  const suggestions = {
    chill: [
      { name: 'Coffee Lounge', type: 'café', rating: 4.5 },
      { name: 'Book Store Hangout', type: 'bookstore', rating: 4.3 },
      { name: 'Park Picnic Area', type: 'park', rating: 4.4 },
    ],
    adventurous: [
      { name: 'Mountain Trek Trail', type: 'adventure', rating: 4.8 },
      { name: 'Zip-line Park', type: 'adventure', rating: 4.7 },
      { name: 'Kayaking Center', type: 'water', rating: 4.6 },
    ],
    foodie: [
      { name: 'Italian Kitchen', type: 'restaurant', rating: 4.8 },
      { name: 'Street Food Court', type: 'street food', rating: 4.6 },
      { name: 'Michelin Star Bistro', type: 'fine dining', rating: 4.9 },
    ],
    romantic: [
      { name: 'Candlelit Restaurant', type: 'restaurant', rating: 4.9 },
      { name: 'Sunset Beach', type: 'beach', rating: 4.7 },
      { name: 'Jazz Lounge', type: 'lounge', rating: 4.5 },
    ],
  };

  const movies = [
    { title: 'Dune: Part Two', genre: 'Sci-Fi', rating: 4.7 },
    { title: 'The Brutalist', genre: 'Drama', rating: 4.6 },
    { title: 'Oppenheimer', genre: 'Biography', rating: 4.8 },
  ];

  // Save to localStorage
  useEffect(() => {
    if (userName) localStorage.setItem('planUserName', userName);
    if (groupCode) localStorage.setItem('planGroupCode', groupCode);
    localStorage.setItem('planJoined', joined.toString());
    if (selectedGroup) localStorage.setItem('planSelectedGroup', JSON.stringify(selectedGroup));
  }, [userName, groupCode, joined, selectedGroup]);

  // Listen to group updates
  useEffect(() => {
    if (!joined || !groupCode) return;

    const groupRef = ref(db, `groups/${groupCode}`);
    const unsubscribe = onValue(groupRef, (snapshot) => {
      if (snapshot.exists()) {
        setSelectedGroup(snapshot.val());
        localStorage.setItem('planSelectedGroup', JSON.stringify(snapshot.val()));
      }
    });

    return () => unsubscribe();
  }, [joined, groupCode]);

  const generateCode = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 6; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
  };

  const handleCreateGroup = async () => {
    if (!newGroupName.trim() || !userName.trim()) {
      setError('Enter your name and group name');
      setTimeout(() => setError(''), 3000);
      return;
    }

    setLoading(true);
    try {
      const code = generateCode();
      const groupRef = ref(db, `groups/${code}`);
      
      const groupData = {
        code: code,
        name: newGroupName.trim(),
        creatorId: userId,
        creatorName: userName.trim(),
        members: {
          [userId]: { name: userName.trim(), email: 'user@example.com', joinedAt: Date.now() }
        },
        messages: {},
        polls: {},
        createdAt: Date.now(),
      };

      await set(groupRef, groupData);
      setGroupCode(code);
      setSelectedGroup(groupData);
      setJoined(true);
      setNewGroupName('');
      setError('');
      alert(`✅ Group created! Code: ${code}`);
    } catch (err) {
      setError('Failed to create group: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleJoinGroup = async () => {
    if (!userName.trim() || !groupCode.trim()) {
      setError('Enter your name and group code');
      setTimeout(() => setError(''), 3000);
      return;
    }

    setLoading(true);
    try {
      const groupRef = ref(db, `groups/${groupCode.toUpperCase()}`);
      
      const unsubscribe = onValue(groupRef, async (snapshot) => {
        if (!snapshot.exists()) {
          setError('Group not found. Invalid code');
          setTimeout(() => setError(''), 3000);
          setLoading(false);
          unsubscribe();
          return;
        }

        const groupData = snapshot.val();
        
        if (groupData.members && groupData.members[userId]) {
          setError('Already a member of this group');
          setTimeout(() => setError(''), 3000);
          setLoading(false);
          unsubscribe();
          return;
        }

        try {
          const memberRef = ref(db, `groups/${groupCode.toUpperCase()}/members/${userId}`);
          await set(memberRef, { 
            name: userName.trim(), 
            email: 'user@example.com', 
            joinedAt: Date.now() 
          });

          setSelectedGroup(groupData);
          setJoined(true);
          setGroupCode(groupCode.toUpperCase());
          setError('');
          alert(`✅ Joined ${groupData.name}!`);
        } catch (err) {
          setError('Failed to join: ' + err.message);
        } finally {
          setLoading(false);
          unsubscribe();
        }
      }, { onlyOnce: true });

    } catch (err) {
      setError('Error: ' + err.message);
      setLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!message.trim() || !selectedGroup) return;

    try {
      const messageId = Date.now();
      const msgRef = ref(db, `groups/${groupCode}/messages/${messageId}`);
      
      await set(msgRef, {
        sender: userName.trim(),
        text: message.trim(),
        timestamp: Date.now(),
      });

      setMessage('');
    } catch (err) {
      setError('Failed to send message: ' + err.message);
    }
  };

  const handleCreatePoll = async () => {
    if (!pollTopic.trim() || pollOptions.filter(o => o.trim()).length < 2) {
      setError('Add topic and at least 2 options');
      setTimeout(() => setError(''), 3000);
      return;
    }

    try {
      const pollId = Date.now();
      const pollRef = ref(db, `groups/${groupCode}/polls/${pollId}`);
      
      await set(pollRef, {
        topic: pollTopic.trim(),
        options: pollOptions.filter(o => o.trim()),
        votes: {},
      });

      setPollTopic('');
      setPollOptions(['', '']);
      setError('');
    } catch (err) {
      setError('Failed to create poll: ' + err.message);
    }
  };

  const handleVote = async (pollId, option) => {
    try {
      const voteRef = ref(db, `groups/${groupCode}/polls/${pollId}/votes/${userId}`);
      await set(voteRef, option);
    } catch (err) {
      setError('Failed to vote: ' + err.message);
    }
  };

  const handleCopyCode = () => {
    navigator.clipboard.writeText(groupCode);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleLeaveGroup = async () => {
    try {
      const memberRef = ref(db, `groups/${groupCode}/members/${userId}`);
      await set(memberRef, null);
      
      setJoined(false);
      setSelectedGroup(null);
      setGroupCode('');
      localStorage.removeItem('planGroupCode');
      localStorage.removeItem('planSelectedGroup');
    } catch (err) {
      setError('Failed to leave group: ' + err.message);
    }
  };

  if (!joined) {
    return (
      <div
        className="min-h-screen flex items-center justify-center px-4"
        style={{
          background: 'linear-gradient(135deg, #e9e8ff 0%, #f6f5ff 50%, #dbd2fa 100%)',
        }}
      >
        <div
          className="max-w-md w-full rounded-3xl shadow-lg p-10"
          style={{
            background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
          }}
        >
          <h2 className="text-3xl font-bold text-center mb-2 text-[#6b4eff]">
            Plan My <span className="text-[#5842c3]">Outings</span>
          </h2>
          <p className="text-center text-gray-600 mb-8 text-sm">Coordinate fun with friends! 🎯</p>

          <form className="space-y-5">
            <div>
              <label className="block text-gray-700 font-medium mb-2">Your Name</label>
              <input
                type="text"
                placeholder="Enter your name"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#6b4eff] transition"
              />
            </div>

            <div>
              <label className="block text-gray-700 font-medium mb-2">Group Name (Create)</label>
              <input
                type="text"
                placeholder="e.g., Movie Night"
                value={newGroupName}
                onChange={(e) => setNewGroupName(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#6b4eff] transition"
              />
            </div>

            {error && (
              <div className="p-3 bg-red-100 border border-red-400 rounded-xl text-red-700 text-sm font-medium">
                {error}
              </div>
            )}

            <button
              type="button"
              onClick={handleCreateGroup}
              disabled={loading}
              className="w-full py-3 bg-gradient-to-r from-[#6b4eff] to-[#5842c3] text-white font-bold rounded-xl hover:opacity-90 transition disabled:opacity-50"
            >
              {loading ? 'Creating...' : 'Create Group ✨'}
            </button>
          </form>

          <div className="my-6 flex items-center">
            <div className="flex-1 border-t border-gray-300"></div>
            <span className="px-3 text-gray-500 text-sm font-medium">OR</span>
            <div className="flex-1 border-t border-gray-300"></div>
          </div>

          <div className="space-y-5">
            <div>
              <label className="block text-gray-700 font-medium mb-2">Join Code</label>
              <input
                type="text"
                placeholder="e.g., ABC123"
                maxLength={6}
                value={groupCode}
                onChange={(e) => setGroupCode(e.target.value.toUpperCase())}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#6b4eff] transition text-center text-lg font-mono font-bold"
              />
            </div>

            <button
              type="button"
              onClick={handleJoinGroup}
              disabled={loading}
              className="w-full py-3 bg-gradient-to-r from-[#ff6b9d] to-[#c2185b] text-white font-bold rounded-xl hover:opacity-90 transition disabled:opacity-50"
            >
              {loading ? 'Joining...' : 'Join Group 🎉'}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div
      className="min-h-screen p-6"
      style={{
        background: 'linear-gradient(135deg, #e9e8ff 0%, #f6f5ff 50%, #dbd2fa 100%)',
      }}
    >
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold text-[#6b4eff]">{selectedGroup?.name || 'Loading...'}</h1>
            <p className="text-gray-600 mt-2">👥 {selectedGroup?.members ? Object.keys(selectedGroup.members).length : 0} members</p>
          </div>
          <button
            onClick={handleLeaveGroup}
            className="px-4 py-2 bg-red-500 text-white rounded-xl font-bold hover:bg-red-600 flex items-center gap-2 transition"
          >
            <LogOut className="w-4 h-4" /> Leave
          </button>
        </div>

        <div
          className="rounded-3xl shadow-lg p-6 mb-6"
          style={{
            background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
          }}
        >
          <div className="flex justify-between items-center">
            <div>
              <p className="text-sm font-medium text-gray-600 mb-1">Group Code:</p>
              <code className="text-2xl font-bold text-[#6b4eff]">{groupCode}</code>
            </div>
            <button
              onClick={handleCopyCode}
              className="p-3 bg-[#6b4eff] text-white rounded-xl hover:bg-[#5842c3] transition"
            >
              <Copy className="w-6 h-6" />
            </button>
            {copied && <span className="text-green-600 font-bold text-sm">✓ Copied!</span>}
          </div>
        </div>

        {error && (
          <div className="mb-4 p-4 bg-red-100 border border-red-400 rounded-2xl text-red-700 font-medium">
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Chat Section */}
          <div className="lg:col-span-2">
            <div
              className="rounded-3xl shadow-lg p-6 mb-6"
              style={{
                background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
              }}
            >
              <h2 className="text-2xl font-bold text-[#6b4eff] mb-4">💬 Chat</h2>
              <div className="bg-white rounded-2xl p-4 h-72 overflow-y-auto mb-4 border-2 border-[#dbd2fa]">
                {selectedGroup?.messages && Object.entries(selectedGroup.messages).length > 0 ? (
                  Object.entries(selectedGroup.messages).map(([id, msg]) => (
                    <div key={id} className="mb-4">
                      <div className="flex justify-between items-baseline">
                        <p className="font-bold text-sm text-[#6b4eff]">{msg.sender}</p>
                        <p className="text-xs text-gray-500">
                          {new Date(msg.timestamp).toLocaleTimeString()}
                        </p>
                      </div>
                      <p className="bg-[#f9f8ff] p-3 rounded-xl mt-1 text-gray-800 border-l-4 border-[#6b4eff]">
                        {msg.text}
                      </p>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 text-center py-12">No messages yet. Say hello! 👋</p>
                )}
              </div>
              <div className="flex gap-2">
                <input
                  type="text"
                  placeholder="Type a message..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#6b4eff] transition"
                />
                <button
                  onClick={handleSendMessage}
                  className="px-6 py-2 bg-gradient-to-r from-[#6b4eff] to-[#5842c3] text-white rounded-xl font-bold hover:opacity-90 transition"
                >
                  Send
                </button>
              </div>
            </div>

            {/* Mood Section */}
            <div
              className="rounded-3xl shadow-lg p-6"
              style={{
                background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
              }}
            >
              <h2 className="text-2xl font-bold text-[#6b4eff] mb-4">🎯 What's the vibe?</h2>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
                {moods.map((m) => (
                  <button
                    key={m.value}
                    onClick={() => setMood(m.value)}
                    className={`p-4 rounded-xl font-bold transition transform ${
                      mood === m.value
                        ? 'bg-gradient-to-r from-[#6b4eff] to-[#5842c3] text-white scale-105 shadow-lg'
                        : m.color + ' text-gray-800 hover:scale-105'
                    }`}
                  >
                    {m.icon} {m.label}
                  </button>
                ))}
              </div>

              <h3 className="text-xl font-bold text-[#6b4eff] mb-4">Recommended Spots:</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {suggestions[mood].map((spot, idx) => (
                  <div
                    key={idx}
                    className="bg-gradient-to-br from-purple-100 to-pink-100 p-4 rounded-2xl border-2 border-[#dbd2fa]"
                  >
                    <p className="font-bold text-gray-800">{spot.name}</p>
                    <p className="text-sm text-gray-600 mb-2">{spot.type}</p>
                    <p className="text-lg font-bold text-[#6b4eff]">⭐ {spot.rating}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Members */}
            <div
              className="rounded-3xl shadow-lg p-6"
              style={{
                background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
              }}
            >
              <h2 className="text-2xl font-bold text-[#6b4eff] mb-4">👥 Members</h2>
              <div className="space-y-2">
                {selectedGroup?.members && Object.entries(selectedGroup.members).map(([id, member]) => (
                  <div
                    key={id}
                    className={`p-3 rounded-xl font-medium ${
                      id === userId
                        ? 'bg-gradient-to-r from-[#6b4eff] to-[#5842c3] text-white'
                        : 'bg-white border-2 border-[#dbd2fa] text-gray-800'
                    }`}
                  >
                    <p>{member.name}</p>
                    {id === userId && <p className="text-xs opacity-90">You</p>}
                  </div>
                ))}
              </div>
            </div>

            {/* Movies */}
            <div
              className="rounded-3xl shadow-lg p-6"
              style={{
                background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
              }}
            >
              <h2 className="text-2xl font-bold text-[#6b4eff] mb-4">🎬 Movies</h2>
              <div className="space-y-3">
                {movies.map((m, idx) => (
                  <div key={idx} className="bg-blue-50 p-3 rounded-xl border-2 border-blue-200">
                    <p className="font-bold text-sm text-gray-800">{m.title}</p>
                    <p className="text-xs text-gray-600">{m.genre}</p>
                    <p className="text-lg font-bold text-[#6b4eff]">⭐ {m.rating}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Polls */}
        <div
          className="rounded-3xl shadow-lg p-6 mt-6"
          style={{
            background: 'linear-gradient(135deg, #f9f8ff 0%, #f3f1ff 50%, #e5ddff 100%)',
          }}
        >
          <h2 className="text-2xl font-bold text-[#6b4eff] mb-4">📋 Polls</h2>

          {selectedGroup?.polls && Object.entries(selectedGroup.polls).length > 0 && (
            <div className="space-y-6 mb-8">
              {Object.entries(selectedGroup.polls).map(([id, poll]) => (
                <div key={id} className="border-2 border-[#6b4eff] rounded-2xl p-4 bg-white">
                  <p className="font-bold text-lg text-[#6b4eff] mb-4">{poll.topic}</p>
                  <div className="space-y-2">
                    {poll.options.map((option) => {
                      const voteCount = poll.votes ? Object.values(poll.votes).filter((v) => v === option).length : 0;
                      const isVoted = poll.votes && poll.votes[userId] === option;
                      return (
                        <button
                          key={option}
                          onClick={() => handleVote(id, option)}
                          className={`w-full p-3 rounded-xl font-bold text-left transition flex justify-between items-center ${
                            isVoted
                              ? 'bg-gradient-to-r from-[#6b4eff] to-[#5842c3] text-white'
                              : 'bg-[#f9f8ff] text-gray-800 hover:bg-[#f3f1ff] border-2 border-[#dbd2fa]'
                          }`}
                        >
                          <span>{option}</span>
                          <span className="text-sm">{voteCount} votes</span>
                        </button>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          )}

          <div className="space-y-3 bg-white p-4 rounded-2xl border-2 border-[#dbd2fa]">
            <input
              type="text"
              placeholder="What should we vote on?"
              value={pollTopic}
              onChange={(e) => setPollTopic(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#6b4eff]"
            />
            {pollOptions.map((opt, idx) => (
              <input
                key={idx}
                type="text"
                placeholder={`Option ${idx + 1}`}
                value={opt}
                onChange={(e) => {
                  const updated = [...pollOptions];
                  updated[idx] = e.target.value;
                  setPollOptions(updated);
                }}
                className="w-full px-3 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#6b4eff]"
              />
            ))}
            <button
              onClick={() => setPollOptions([...pollOptions, ''])}
              className="w-full px-3 py-2 bg-gray-200 rounded-xl font-bold hover:bg-gray-300 transition text-gray-800"
            >
              + Add Option
            </button>
            <button
              onClick={handleCreatePoll}
              className="w-full px-3 py-2 bg-gradient-to-r from-[#6b4eff] to-[#5842c3] text-white rounded-xl font-bold hover:opacity-90 transition"
            >
              Create Poll 🗳️
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Groups;